{"version":3,"file":"live-3d-terrain-aag/view.js","mappings":"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","sources":["webpack://live-3d-terrain-aag/./src/live-3d-terrain-aag/view.js"],"sourcesContent":["// Three.js is now enqueued globally via PHP, so we do not need to import it here.\n// It is available as the global `THREE` object.\n\n/**\n * This is the front-end script for the block, which runs in the browser.\n * It's responsible for finding our block's container and rendering the\n * interactive 3D terrain scene.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Find all instances of our block on the page.\n    const blocks = document.querySelectorAll('.wp-block-live-3d-terrain-aag-live-3d-terrain-aag');\n\n\tblocks.forEach((block) => {\n    const mount = block.querySelector('.live-3d-terrain-aag__canvas');\n    if (!mount) {\n        return;\n    }\n\n    let scene, camera, renderer, geometry, terrain, animate;\n    let elevationData = null;\n    const terrainWidth = 2048;\n    const terrainHeight = 2048;\n\n    const fetchElevationData = (callback) => {\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.src = 'https://picsum.photos/2048/2048'; // Using a placeholder for a 2048x2048 image. Replace with your actual image path.\n\t\timg.src = 'https://cb.lndo.site/wp-content/uploads/2025/08/mt-fuji-heightmap.png'; // Using a placeholder for a 2048x2048 image. Replace with your actual image path.\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            canvas.width = terrainWidth;\n            canvas.height = terrainHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(img, 0, 0);\n            const imageData = context.getImageData(0, 0, terrainWidth, terrainHeight).data;\n            const data = [];\n            for (let i = 0; i < imageData.length; i += 4) {\n                // Use the red channel (or any single channel) for grayscale value\n                const grayValue = imageData[i];\n                // Scale the height to be more visible.\n                data.push(grayValue * 0.2);\n            }\n            callback(data);\n        };\n        img.onerror = () => {\n            console.error('Error loading image. Using fallback data.');\n            const fallbackData = [];\n            for (let i = 0; i < terrainWidth * terrainHeight; i++) {\n                fallbackData.push(0);\n            }\n            callback(fallbackData);\n        };\n    };\n\n    const init = () => {\n        // SCENE SETUP\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color(0x333333);\n\n        // CAMERA SETUP\n        camera = new THREE.PerspectiveCamera(75, mount.clientWidth / mount.clientHeight, 0.1, 10000);\n        camera.position.z = 500;\n        camera.position.y = 300;\n        camera.rotation.x = -Math.PI / 4;\n\n        // RENDERER SETUP\n        renderer = new THREE.WebGLRenderer();\n        renderer.setSize(mount.clientWidth, mount.clientHeight);\n        mount.appendChild(renderer.domElement);\n\n        // TERRAIN GENERATION\n        fetchElevationData((data) => {\n            elevationData = data;\n\n            // TERRAIN GEOMETRY\n            geometry = new THREE.PlaneGeometry(2048, 2048, terrainWidth - 1, terrainHeight - 1);\n            // geometry = new THREE.PlaneGeometry(2048, 2048, 100 - 1, 100 - 1);\n            const vertices = geometry.attributes.position.array;\n\n            for (let i = 0; i < elevationData.length; i++) {\n                vertices[i * 3 + 2] = elevationData[i];\n            }\n            geometry.computeVertexNormals();\n\n            // MATERIAL & MESH\n            const material = new THREE.MeshPhongMaterial({\n                // color: 0x00cc66,\n\t\t\t\tcolor: 0xddffdd,\n                wireframe: false,\n            });\n            terrain = new THREE.Mesh(geometry, material);\n            terrain.rotation.x = -Math.PI / 2;\n            scene.add(terrain);\n\n            // LIGHTING\n            const ambientLight = new THREE.AmbientLight(0x404040);\n            scene.add(ambientLight);\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n            directionalLight.position.set(50, 40, 50);\n            scene.add(directionalLight);\n\n            // ANIMATION LOOP\n            animate = () => {\n                requestAnimationFrame(animate);\n                if (terrain) {\n                    terrain.rotation.z += 0.001;\n                }\n                renderer.render(scene, camera);\n            };\n            animate();\n        });\n    };\n\n    // Handle window resizing to keep the scene responsive.\n    window.addEventListener('resize', () => {\n        if (camera && renderer && mount) {\n            camera.aspect = mount.clientWidth / mount.clientHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(mount.clientWidth, mount.clientHeight);\n        }\n    });\n\n    init();\n\t});\n});\n"],"names":["document","addEventListener","blocks","querySelectorAll","forEach","block","mount","querySelector","scene","camera","renderer","geometry","terrain","animate","elevationData","terrainWidth","terrainHeight","fetchElevationData","callback","img","Image","crossOrigin","src","onload","canvas","createElement","width","height","context","getContext","drawImage","imageData","getImageData","data","i","length","grayValue","push","onerror","console","error","fallbackData","init","THREE","Scene","background","Color","PerspectiveCamera","clientWidth","clientHeight","position","z","y","rotation","x","Math","PI","WebGLRenderer","setSize","appendChild","domElement","PlaneGeometry","vertices","attributes","array","computeVertexNormals","material","MeshPhongMaterial","color","wireframe","Mesh","add","ambientLight","AmbientLight","directionalLight","DirectionalLight","set","requestAnimationFrame","render","window","aspect","updateProjectionMatrix"],"sourceRoot":""}